{
  "name": "common-env",
  "version": "4.1.0",
  "keywords": [
    "environment",
    "env",
    "var",
    "getenv",
    "variables"
  ],
  "description": "A nice little helper for retrieving configuration from environment variable",
  "main": "./lib",
  "directories": {
    "doc": "docs",
    "test": "test"
  },
  "scripts": {
    "test": "mocha test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/FGRibreau/common-env.git"
  },
  "author": {
    "name": "Francois-Guillaume Ribreau",
    "email": "npm@fgribreau.com",
    "url": "http://fgribreau.com/"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/FGRibreau/common-env/issues"
  },
  "homepage": "https://github.com/FGRibreau/common-env",
  "devDependencies": {
    "chai": "^1.10.0",
    "mocha": "^2.1.0"
  },
  "dependencies": {
    "lodash": "^3.8.0"
  },
  "readme": "common-env\n==========\n\n[![Build Status](https://drone.io/github.com/FGRibreau/common-env/status.png)](https://drone.io/github.com/FGRibreau/common-env/latest)\n[![Deps](https://david-dm.org/FGRibreau/common-env.png)](https://david-dm.org/FGRibreau/common-env)\n[![Version](http://badge.fury.io/js/common-env.png)](https://david-dm.org/FGRibreau/common-env)\n\nA little helper I use everywhere for configuration. [Environment variables](http://blog.honeybadger.io/ruby-guide-environment-variables/) are a really great way to quickly change a program behavior.\n\n# philosophy\n\nHere is my principle:\n\n> Every constant in code: number, boolean or string* should be configurable\n\n\\* besides i18n translation key an things like that of course (well, now that we've got symbols in ES6...)\n\n# npm\n\n```shell\nnpm install common-env\n```\n\n# env.getOrDie(envVarName)\n\n# env.getOrElse(envVarName, default)\n\n# env.getOrElseAll(object)\n\n```javascript\nvar logger = console;\nvar env = require('common-env')();\n\n// AMQP_LOGIN=plop AMQP_CONNECT=true AMQP_EXCHANGES[0]_NAME=new_exchange node test.js\nvar config = env.getOrElseAll({\n  amqp: {\n    login: 'guest',\n    password: 'guest',\n    host: 'localhost',\n    port: 5672,\n    connect: false,\n    exchanges:[{\n      name: 'first_exchange'\n    },{\n      name: 'second_exchange'\n    }]\n  },\n\n  FULL_UPPER_CASE: {\n    PORT: 8080\n  },\n\n  MICROSTATS: {\n    HASHKEY: 'B:mx:global'\n  }\n});\n\nt.strictEqual(config.amqp.login, 'plop'); // converted from env\nt.strictEqual(config.amqp.port, 5672);\nt.strictEqual(config.amqp.connect, true); // converted from env\nt.strictEqual(config.amqp.exchanges[0].name, 'new_exchange'); // extracted from env\nt.strictEqual(config.FULL_UPPER_CASE.PORT, 8080);\n```\n\n# env.on('env:fallback', f(key, $default))\n# env.on('env:found', f(key, value, $default))\n\n```javascript\n// let set NODE_ENV was set to \"production\"\n\nvar config = env\n      .on('env:found', function (fullKeyName, value) {\n        console.log('[env] %s was defined, using: %s', fullKeyName, String(value));\n      })\n      .on('env:fallback', function (fullKeyName, $default) {\n        console.log('[env] %s was not defined, using default: %s', fullKeyName, String($default));\n      })\n      .getOrElseAll({\n        node: {\n          env: 'production'\n        },\n        a: {\n          b: 'ok'\n        }\n      });\n\n// Will print\n\n// [env] NODE_ENV was defined, using: production\n// [env] A_B was not defined, using default: ok\n```\n\n\n## Specifying multiple aliases\n\nIt's sometimes useful to be able to specify aliases, for instance [Clever-cloud](http://clever-cloud.com) or [Heroku](https://heroku.com) expose their own environment variable names while your application's internal code may not want to rely on them. You may not want to depend on your hosting provider conventions.\n\nCommon-env adds a [layer of indirection](http://en.wikipedia.org/wiki/Fundamental_theorem_of_software_engineering) enabling you to specify environment aliases that won't impact your codebase.\n\n#### Usage\n\n```javascript\nvar config = env.getOrElseAll({\n  amqp: {\n    login: {\n      $default: 'guest',\n      $aliases: ['ADDON_RABBITMQ_LOGIN', 'LOCAL_RABBITMQ_LOGIN']\n    },\n    password: 'guest',\n    host: 'localhost',\n    port: 5672\n  }\n});\n\nt.strictEqual(config.amqp.login, 'plop'); // converted from env\n```\n\n#### How common-env resolves `config.amqp.login`\n\n- Common-env will first read `ADDON_RABBITMQ_LOGIN` environment variable, if it exists, its value will be used.\n- If not common-env will read `LOCAL_RABBITMQ_LOGIN`, if it exists, its value will be used.\n- If not common-env will read `AMQP_LOGIN`, if it exists, its value will be used.\n- If not common-env will fallback on `$default` value.\n\n<p align=\"center\">\n<img style=\"width:100%\" src=\"./docs/Thumbs-Up-Gif.gif\"/>\n</p>\n\n\n# How to retrieve old common-env logging behaviour\n\nCommon-env 1.x.x-2.x.x was displaying logs, here is how to retrieve the same behaviour in 3.x.x.\n\n```javascript\nvar logger = console;\nvar config = require('common-env/withLogger')(logger).getOrElseAll({\n  amqp: {\n    login: {\n      $default: 'guest',\n      $aliases: ['ADDON_RABBITMQ_LOGIN', 'LOCAL_RABBITMQ_LOGIN']\n    },\n    password: 'guest',\n    host: 'localhost',\n    port: 5672\n  }\n});\n\n```\n\n# [Changelog](/CHANGELOG.md)\n",
  "readmeFilename": "README.md",
  "_id": "common-env@4.1.0",
  "_from": "common-env@4.*.*"
}
